---
- name: Provision AWS instances
  hosts: localhost
  connection: local
  gather_facts: False

  # load AWS variables from this group vars file
  vars_files:
  - group_vars/ctjon

  tasks:
  - name: create a VPC with dedicated tenancy and a couple of tags
    ec2_vpc_net:
      name: "{{ ec2_vpc_net_name }}"
      cidr_block: "{{ ec2_cidr }}"
      region: "{{ ec2_region }}"
      tags:
        Name: "{{ ec2_vpc_net_name }}"
        ansible_group: "{{ ec2_ansible_group }}"
      tenancy: default
    register: my_vpc

  - name: dump vpc info for my_vpc
    debug: 
      var: my_vpc
    when: debug_flag is defined

  - name: create security group "{{ ec2_security_group_name }}"
    ec2_group:
      name: "{{ ec2_security_group_name }}"
      description: security group with rule descriptions
      vpc_id: "{{ my_vpc.vpc.id }}"
      region: "{{ ec2_region }}"
      tags:
        Name: "{{ ec2_security_group_name }}"
        ansible_group: "{{ ec2_ansible_group }}"
      rules:
        - proto: icmp
          from_port: 8 # icmp type, -1 = any type
          to_port:  -1 # icmp subtype, -1 = any subtype
          cidr_ip: 0.0.0.0/0
          rule_desc: allow ping
        - proto: tcp
          ports:
          - 22
          - 80
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on port 22,80
    register: my_security_group

  - name: dump security group info for {{ my_security_group }}
    debug: 
      var: my_security_group
    when: debug_flag is defined

  - name: dump security group info for {{ my_security_group.group_id }}
    debug: 
      var: my_security_group.group_id
    when: debug_flag is defined

  - name: dump security group info for {{ my_security_group.group_name }}
    debug: 
      var: my_security_group.group_name
    when: debug_flag is defined

  - name: Create {{ ec2_vpc_subnet_name }} subnet
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ my_vpc.vpc.id }}"
      cidr: "{{ ec2_cidr }}"
      map_public: yes
      tags:
        Name: "{{ ec2_vpc_subnet_name }}"
        ansible_group: "{{ ec2_ansible_group }}"
    register: my_vpc_subnet

  - name: dump {{ ec2_vpc_subnet_name }} info
    debug: 
      var: my_vpc_subnet
    when: debug_flag is defined

  - name: create {{ ec2_igw_name }}"
    ec2_vpc_igw:
      vpc_id: "{{ my_vpc.vpc.id }}"
      state: present
      tags:
        Name:: "{{ ec2_igw_name }}"
        ansible_group: "{{ ec2_ansible_group }}"
    register: my_igw

  - name: dump {{ ec2_igw_name }} info
    debug: 
      var: my_igw
    when: debug_flag is defined

  - name: Set up public subnet route table
    ec2_vpc_route_table:
      vpc_id: "{{ my_vpc.vpc.id }}"
      region: "{{ ec2_region }}"
      tags:
        Name: "{{ ec2_route_table_name }}"
        ansible_group: "{{ ec2_ansible_group }}"
      subnets:
        - "{{ my_vpc_subnet.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ my_igw.gateway_id }}"
    register: my_route_table

  - name: dump {{ my_route_table }} info
    debug: 
      var: my_route_table
    when: debug_flag is defined

  - name: dump critical_vm value
    debug: 
      var: critical_vm
    when: debug_flag is defined

  - name: Launch {{ec2_instance_count}} AWS instances
    ec2:
      #access_key: "{{ ec2_access_key }}"
      #secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ my_security_group.group_name }}"
      group_id: "{{ my_security_group.group_id }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image }}"
      region: "{{ ec2_region }}"
      vpc_subnet_id: "{{ my_vpc_subnet.subnet.id }}"
      instance_tags: 
        Name: "{{ tower_user_name }}_test"
        ansible_group: "{{ ec2_ansible_group }}"
        AlwaysUp: "{{ critical_vm }}"
      count: "{{ ec2_instance_count }}"
      wait: true
    register: ec2_result

  - name: Wait for SSH to come up
    wait_for:
      host: "{{ item.public_dns_name }}"
      port: 22 
      delay: 60 
      timeout: 320 
      state: started
    with_items: "{{ ec2_result.instances }}"
    async: 250
    poll: 0
    register: wait_result

  - name: wait_for - check on async task
    async_status:
      jid: "{{ item.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: 300
    with_items: "{{wait_result.results}}"

...
