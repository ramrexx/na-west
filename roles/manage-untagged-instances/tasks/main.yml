---
- block:
  - name: "{{ aws_region }}: Build a list of instances"
    ec2_instance_info:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ aws_region }}"
    register: aws_instances
    failed_when: aws_instances.instances | length == 0

  - name: "{{ aws_region }}: Count aws_instances"
    debug:
      var: aws_instances.instances | length

  - name: "{{ aws_region }}: Filter instances based on AlwaysUp:False tag or missing tag"
    set_fact:
      aws_instance_ids: "{{ aws_instances | json_query(aws_query) }}"
    vars:
      aws_query: "instances[?tags.AlwaysUp!='True' && 'true' && 'yes' && 'Yes'].instance_id"

  - name: "{{ aws_region }}: Log aws_instance_ids"
    debug:
      msg:
        - "Number if instances found: {{ aws_instance_ids | length }}"
        - "List of instances: {{ aws_instance_ids }}"

  - name: "{{ aws_region }}: Assign missing AlwaysUp tag"
    ec2_tag:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ aws_region }}"
      resource: "{{ item }}"
      state: present
      tags:
        AlwaysUp: False
    with_items: "{{ aws_instance_ids }}"
    failed_when: aws_instance_ids | length == 0

  - name: "{{ aws_region }}: Stop the AlwaysUp:False instances"
    ec2:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ aws_region }}"
      instance_ids: "{{ aws_instance_ids }}"
      state: stopped
      wait: False

  rescue:
    - debug:
        msg:
          - "{{ aws_region }}: No instances found"

  always:
    - name: "{{ aws_region }}: Reset aws_instances variable"
      set_fact:
        aws_instance_ids: []
